-- DriftwynLib - Exploit UI Library
local DriftwynLib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local Players = game:GetService("Players")

function DriftwynLib:CreateWindow(config)
    local self = {}
    self.Title = config.Name or "Driftwyn UI"
    self.Tabs = {}
    self.ActiveTab = nil

    -- Build Base GUI
    local gui = Instance.new("ScreenGui")
    gui.Name = "DriftwynUI"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

    local main = Instance.new("Frame")
    main.Name = "MainFrame"
    main.Size = UDim2.new(0, 620, 0, 360)
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.Position = UDim2.new(0.5, 0, 0.5, 0)
    main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    main.Parent = gui

    Instance.new("UICorner", main).CornerRadius = UDim.new(0, 6)

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Text = self.Title
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.BackgroundTransparency = 1
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Parent = main

    local tabHolder = Instance.new("Frame")
    tabHolder.Name = "TabHolder"
    tabHolder.Size = UDim2.new(0, 110, 1, -30)
    tabHolder.Position = UDim2.new(0, 0, 0, 30)
    tabHolder.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    tabHolder.Parent = main

    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 4)
    layout.Parent = tabHolder

    local content = Instance.new("Frame")
    content.Name = "ContentFrame"
    content.Position = UDim2.new(0, 115, 0, 35)
    content.Size = UDim2.new(1, -120, 1, -40)
    content.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    content.BorderSizePixel = 0
    content.Parent = main

    -- Mobile/PC Toggle UI Keybind (F2 or Two-Finger Tap)
    local function toggleUI()
        gui.Enabled = not gui.Enabled
    end

    ContextActionService:BindAction("ToggleDriftwynUI", function(_, inputState)
        if inputState == Enum.UserInputState.Begin then toggleUI() end
    end, false, Enum.KeyCode.F2)

    UserInputService.TouchTap:Connect(function(touches)
        if #touches >= 2 then toggleUI() end
    end)

    local drag
    drag = function(frame)
        local dragging, dragInput, startPos, startInputPos
        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                startInputPos = input.Position
                startPos = frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - startInputPos
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end
    drag(main)

    function self:AddTab(config)
        local tab = {}
        tab.Name = config.Name or "Tab"
        tab.Sections = {}

        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 30)
        btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 14
        btn.Text = tab.Name
        btn.Parent = tabHolder

        local page = Instance.new("Frame")
        page.Size = UDim2.new(1, 0, 1, 0)
        page.Visible = false
        page.BackgroundTransparency = 1
        page.Parent = content

        local pageLayout = Instance.new("UIListLayout")
        pageLayout.Padding = UDim.new(0, 8)
        pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
        pageLayout.Parent = page

        btn.MouseButton1Click:Connect(function()
            if self.ActiveTab then
                self.ActiveTab.Visible = false
            end
            page.Visible = true
            self.ActiveTab = page
        end)

        function tab:AddLabel(text)
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.Text = text
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = page
        end

        function tab:AddParagraph(title, body)
            tab:AddLabel(title)
            local text = Instance.new("TextLabel")
            text.Size = UDim2.new(1, 0, 0, 60)
            text.Text = body
            text.TextWrapped = true
            text.TextYAlignment = Enum.TextYAlignment.Top
            text.TextXAlignment = Enum.TextXAlignment.Left
            text.TextColor3 = Color3.fromRGB(200, 200, 200)
            text.BackgroundTransparency = 1
            text.Font = Enum.Font.Gotham
            text.TextSize = 13
            text.Parent = page
        end

        function tab:AddButton(cfg)
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -10, 0, 30)
            btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.Font = Enum.Font.GothamBold
            btn.TextSize = 14
            btn.Text = cfg.Name
            btn.Parent = page
            btn.MouseButton1Click:Connect(cfg.Callback)
        end

        function tab:AddToggle(cfg)
            local val = cfg.Default or false
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -10, 0, 30)
            frame.BackgroundTransparency = 1
            frame.Parent = page

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.8, 0, 1, 0)
            label.Text = cfg.Name
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = frame

            local box = Instance.new("TextButton")
            box.Size = UDim2.new(0.2, 0, 1, 0)
            box.Position = UDim2.new(0.8, 0, 0, 0)
            box.BackgroundColor3 = val and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
            box.Text = ""
            box.Parent = frame

            box.MouseButton1Click:Connect(function()
                val = not val
                box.BackgroundColor3 = val and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
                cfg.Callback(val)
            end)
        end

        function tab:AddTextbox(cfg)
            local box = Instance.new("TextBox")
            box.Size = UDim2.new(1, -10, 0, 30)
            box.Text = cfg.Placeholder or "Type..."
            box.Font = Enum.Font.Gotham
            box.TextSize = 14
            box.TextColor3 = Color3.fromRGB(255, 255, 255)
            box.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            box.Parent = page

            box.FocusLost:Connect(function(enter)
                if enter and cfg.Callback then
                    cfg.Callback(box.Text)
                end
            end)
        end

        function tab:AddSlider(cfg)
            local val = cfg.Default or cfg.Min

            local holder = Instance.new("Frame")
            holder.Size = UDim2.new(1, -10, 0, 40)
            holder.BackgroundTransparency = 1
            holder.Parent = page

            local label = Instance.new("TextLabel")
            label.Text = cfg.Name .. ": " .. val
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = holder

            local bar = Instance.new("Frame")
            bar.Size = UDim2.new(1, 0, 0, 10)
            bar.Position = UDim2.new(0, 0, 0, 25)
            bar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            bar.BorderSizePixel = 0
            bar.Parent = holder

            local fill = Instance.new("Frame")
            fill.Size = UDim2.new((val - cfg.Min) / (cfg.Max - cfg.Min), 0, 1, 0)
            fill.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
            fill.BorderSizePixel = 0
            fill.Parent = bar

            local dragging = false

            local function update(input)
                local percent = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
                val = math.floor(cfg.Min + (cfg.Max - cfg.Min) * percent + 0.5)
                fill.Size = UDim2.new(percent, 0, 1, 0)
                label.Text = cfg.Name .. ": " .. val
                if cfg.Callback then cfg.Callback(val) end
            end

            bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    update(input)
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    update(input)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
        end

        function tab:AddDropdown(cfg)
            local selected = {}

            local holder = Instance.new("Frame")
            holder.Size = UDim2.new(1, -10, 0, 100)
            holder.BackgroundTransparency = 1
            holder.Parent = page

            local label = Instance.new("TextLabel")
            label.Text = cfg.Name .. ": None"
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = holder

            local dropdown = Instance.new("ScrollingFrame")
            dropdown.Position = UDim2.new(0, 0, 0, 25)
            dropdown.Size = UDim2.new(1, 0, 0, 70)
            dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            dropdown.BorderSizePixel = 0
            dropdown.ScrollBarThickness = 5
            dropdown.CanvasSize = UDim2.new(0, 0, 0, #cfg.Options * 30)
            dropdown.Parent = holder

            local layout = Instance.new("UIListLayout")
            layout.SortOrder = Enum.SortOrder.LayoutOrder
            layout.Padding = UDim.new(0, 2)
            layout.Parent = dropdown

            for _, opt in ipairs(cfg.Options) do
                local btn = Instance.new("TextButton")
                btn.Size = UDim2.new(1, -10, 0, 25)
                btn.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                btn.Text = opt
                btn.TextColor3 = Color3.fromRGB(255, 255, 255)
                btn.Font = Enum.Font.Gotham
                btn.TextSize = 13
                btn.BorderSizePixel = 0
                btn.Parent = dropdown

                btn.MouseButton1Click:Connect(function()
                    if table.find(selected, opt) then
                        table.remove(selected, table.find(selected, opt))
                    else
                        table.insert(selected, opt)
                    end
                    label.Text = cfg.Name .. ": " .. table.concat(selected, ", ")
                    if cfg.Callback then cfg.Callback(selected) end
                end)
            end
        end

        table.insert(self.Tabs, tab)
        return tab
    end

    return self
end

return DriftwynLib
