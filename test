-- DriftwynLib Module
local DriftwynLib = {}

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local configFile = "DriftwynUI_Config.json"
local defaultCfg = { Visible = true, Position = { X = 0.5, Y = 0.5, Ox = 0, Oy = 0 } }

function DriftwynLib:CreateWindow(settings)
    local cfg = defaultCfg
    if isfile(configFile) then
        local ok, data = pcall(function()
            return HttpService:JSONDecode(readfile(configFile))
        end)
        if ok and type(data) == "table" then
            cfg = data
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = settings.Name or "DriftwynUI"
    gui.Parent = player:WaitForChild("PlayerGui")
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local main = Instance.new("Frame")
    main.Name = "MainFrame"
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.Position = UDim2.new(cfg.Position.X, cfg.Position.Ox, cfg.Position.Y, cfg.Position.Oy)
    main.Size = UDim2.new(0, UIS.TouchEnabled and 340 or 600, 0, UIS.TouchEnabled and 360 or 400)
    main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    main.Visible = cfg.Visible
    main.Parent = gui

    Instance.new("UICorner", main).CornerRadius = UDim.new(0, 6)

    local title = Instance.new("TextLabel", main)
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.TextColor3 = Color3.new(1, 1, 1)
    title.Text = settings.Title or "Driftwyn Hub"

    local tabs = {}
    local currentTab

    local function switchTab(tab)
        if currentTab then currentTab.Visible = false end
        currentTab = tab
        currentTab.Visible = true
    end

    function DriftwynLib:AddTab(name)
        local tabBtn = Instance.new("TextButton")
        tabBtn.Text = name
        tabBtn.Size = UDim2.new(0, 120, 0, 30)
        tabBtn.Parent = main
        tabBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        tabBtn.TextColor3 = Color3.new(1, 1, 1)

        local page = Instance.new("ScrollingFrame")
        page.Size = UDim2.new(1, -20, 1, -40)
        page.Position = UDim2.new(0, 10, 0, 35)
        page.BackgroundTransparency = 1
        page.ScrollBarThickness = 6
        page.Visible = false
        page.Parent = main

        local layout = Instance.new("UIListLayout", page)
        layout.Padding = UDim.new(0, 6)
        layout.SortOrder = Enum.SortOrder.LayoutOrder

        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
        end)

        tabBtn.MouseButton1Click:Connect(function()
            switchTab(page)
        end)

        if not currentTab then switchTab(page) end

        local tabObj = {}

        function tabObj:AddSection(title)
            local section = Instance.new("Frame", page)
            section.Size = UDim2.new(1, 0, 0, 34)
            section.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            section.ClipsDescendants = true
            Instance.new("UICorner", section).CornerRadius = UDim.new(0, 6)

            local header = Instance.new("TextButton", section)
            header.Text = "▼  " .. title
            header.Size = UDim2.new(1, 0, 0, 34)
            header.BackgroundTransparency = 1
            header.TextColor3 = Color3.new(1, 1, 1)
            header.Font = Enum.Font.GothamBold
            header.TextSize = 14
            header.TextXAlignment = Enum.TextXAlignment.Left

            local content = Instance.new("Frame", section)
            content.Position = UDim2.new(0, 0, 0, 34)
            content.Size = UDim2.new(1, 0, 0, 0)
            content.BackgroundTransparency = 1
            content.Name = "Content"

            local layout = Instance.new("UIListLayout", content)
            layout.Padding = UDim.new(0, 6)
            layout.SortOrder = Enum.SortOrder.LayoutOrder

            local open = true
            header.MouseButton1Click:Connect(function()
                open = not open
                header.Text = (open and "▼ " or "▶ ") .. title
                local goalSize = open and (34 + layout.AbsoluteContentSize.Y) or 34
                TweenService:Create(section, TweenInfo.new(0.25), { Size = UDim2.new(1, 0, 0, goalSize) }):Play()
            end)

            layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
                if open then
                    section.Size = UDim2.new(1, 0, 0, 34 + layout.AbsoluteContentSize.Y)
                end
            end)

            local sectionApi = {}

            -- Existing UI elements...
            -- [AddButton, AddToggle, AddTextBox, AddKeybind remain unchanged]

            -- AddDropdown
            function sectionApi:AddDropdown(name, options, callback)
                local f = Instance.new("Frame", content)
                f.Size = UDim2.new(1, 0, 0, 34)
                f.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                Instance.new("UICorner", f).CornerRadius = UDim.new(0, 6)

                local selected = Instance.new("TextButton", f)
                selected.Text = name .. ": " .. options[1]
                selected.Size = UDim2.new(1, 0, 1, 0)
                selected.BackgroundTransparency = 1
                selected.TextColor3 = Color3.new(1, 1, 1)
                selected.Font = Enum.Font.Gotham
                selected.TextSize = 14
                selected.TextXAlignment = Enum.TextXAlignment.Left

                local drop = Instance.new("Frame", f)
                drop.Size = UDim2.new(1, 0, 0, #options * 28)
                drop.Position = UDim2.new(0, 0, 1, 0)
                drop.Visible = false
                drop.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                drop.ZIndex = 10
                Instance.new("UICorner", drop).CornerRadius = UDim.new(0, 6)

                local layout = Instance.new("UIListLayout", drop)
                layout.Padding = UDim.new(0, 2)
                layout.SortOrder = Enum.SortOrder.LayoutOrder

                for _, opt in ipairs(options) do
                    local btn = Instance.new("TextButton", drop)
                    btn.Text = opt
                    btn.Size = UDim2.new(1, 0, 0, 28)
                    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    btn.TextColor3 = Color3.new(1, 1, 1)
                    btn.Font = Enum.Font.Gotham
                    btn.TextSize = 14
                    btn.MouseButton1Click:Connect(function()
                        selected.Text = name .. ": " .. opt
                        callback(opt)
                        drop.Visible = false
                    end)
                end

                selected.MouseButton1Click:Connect(function()
                    drop.Visible = not drop.Visible
                end)

                drop.Parent = f
                return f
            end

            -- AddSlider
            function sectionApi:AddSlider(cfg)
                local val = cfg.Default or cfg.Min

                local holder = Instance.new("Frame", content)
                holder.Size = UDim2.new(1, 0, 0, 40)
                holder.BackgroundTransparency = 1

                local label = Instance.new("TextLabel", holder)
                label.Text = cfg.Name .. ": " .. val
                label.Size = UDim2.new(1, 0, 0.5, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.new(1, 1, 1)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left

                local bar = Instance.new("Frame", holder)
                bar.Position = UDim2.new(0, 0, 0.5, 4)
                bar.Size = UDim2.new(1, 0, 0, 8)
                bar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                bar.BorderSizePixel = 0
                Instance.new("UICorner", bar).CornerRadius = UDim.new(1, 0)

                local fill = Instance.new("Frame", bar)
                fill.Size = UDim2.new(0, 0, 1, 0)
                fill.BackgroundColor3 = Color3.fromRGB(120, 120, 255)
                fill.BorderSizePixel = 0
                Instance.new("UICorner", fill).CornerRadius = UDim.new(1, 0)

                local dragging = false
                local function update(input)
                    local rel = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
                    val = math.floor(((cfg.Max - cfg.Min) * rel + cfg.Min) + 0.5)
                    fill.Size = UDim2.new(rel, 0, 1, 0)
                    label.Text = cfg.Name .. ": " .. val
                    if cfg.Callback then cfg.Callback(val) end
                end

                bar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        update(input)
                    end
                end)
                bar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                RunService.RenderStepped:Connect(function()
                    if dragging then
                        local input = UIS:GetMouseLocation()
                        update({ Position = Vector2.new(input.X, input.Y) })
                    end
                end)

                return holder
            end

            -- AddMultiDropdown
            function sectionApi:AddMultiDropdown(name, options, callback)
                local selectedValues = {}

                local f = Instance.new("Frame", content)
                f.Size = UDim2.new(1, 0, 0, 34)
                f.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                Instance.new("UICorner", f).CornerRadius = UDim.new(0, 6)

                local selected = Instance.new("TextButton", f)
                selected.Text = name .. ": None"
                selected.Size = UDim2.new(1, 0, 1, 0)
                selected.BackgroundTransparency = 1
                selected.TextColor3 = Color3.new(1, 1, 1)
                selected.Font = Enum.Font.Gotham
                selected.TextSize = 14
                selected.TextXAlignment = Enum.TextXAlignment.Left

                local drop = Instance.new("Frame", f)
                drop.Size = UDim2.new(1, 0, 0, #options * 28)
                drop.Position = UDim2.new(0, 0, 1, 0)
                drop.Visible = false
                drop.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                drop.ZIndex = 10
                Instance.new("UICorner", drop).CornerRadius = UDim.new(0, 6)

                local layout = Instance.new("UIListLayout", drop)
                layout.Padding = UDim.new(0, 2)
                layout.SortOrder = Enum.SortOrder.LayoutOrder

                for _, opt in ipairs(options) do
                    local btn = Instance.new("TextButton", drop)
                    btn.Text = opt
                    btn.Size = UDim2.new(1, 0, 0, 28)
                    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    btn.TextColor3 = Color3.new(1, 1, 1)
                    btn.Font = Enum.Font.Gotham
                    btn.TextSize = 14

                    local selectedState = false
                    btn.MouseButton1Click:Connect(function()
                        selectedState = not selectedState
                        if selectedState then
                            table.insert(selectedValues, opt)
                            btn.BackgroundColor3 = Color3.fromRGB(70, 70, 255)
                        else
                            table.remove(selectedValues, table.find(selectedValues, opt))
                            btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                        end
                        selected.Text = name .. ": " .. (#selectedValues > 0 and table.concat(selectedValues, ", ") or "None")
                        callback(selectedValues)
                    end)
                end

                selected.MouseButton1Click:Connect(function()
                    drop.Visible = not drop.Visible
                end)

                drop.Parent = f
                return f
            end

            return sectionApi
        end

        tabObj.Container = page
        tabs[#tabs+1] = tabObj
        return tabObj
    end

    UIS.InputBegan:Connect(function(input, gp)
        if not gp and input.KeyCode == Enum.KeyCode.RightControl then
            main.Visible = not main.Visible
            cfg.Visible = main.Visible
            writefile(configFile, HttpService:JSONEncode(cfg))
        end
    end)

    -- Dragging logic remains unchanged...
    local dragging, dragInput, dragStart, startPos
    main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    cfg.Position = {
                        X = main.Position.X.Scale,
                        Ox = main.Position.X.Offset,
                        Y = main.Position.Y.Scale,
                        Oy = main.Position.Y.Offset
                    }
                    writefile(configFile, HttpService:JSONEncode(cfg))
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    return self
end

return DriftwynLib
