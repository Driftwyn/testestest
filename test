-- DriftwynLib (Modern UI Version)
-- Author: Driftwyn
-- Theme: Modern Dark Purple | Mobile + PC Compatible

local DriftwynLib = {}

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local configFile = "DriftwynUI_Config.json"
local defaultCfg = {
    Visible = true,
    Position = { X = 0.5, Y = 0.5, Ox = 0, Oy = 0 }
}

local COLORS = {
    Background   = Color3.fromRGB(25, 25, 25),
    Accent       = Color3.fromRGB(120, 90, 255),
    Text         = Color3.new(1, 1, 1),
    Section      = Color3.fromRGB(35, 35, 35),
    Button       = Color3.fromRGB(85, 65, 255),
    ToggleOn     = Color3.fromRGB(255, 65, 100),
    ToggleOff    = Color3.fromRGB(60, 60, 60),
    Dropdown     = Color3.fromRGB(40, 40, 40),
    DropdownItem = Color3.fromRGB(50, 50, 50),
}

function DriftwynLib:CreateWindow(settings)
    local cfg = defaultCfg
    if isfile(configFile) then
        local ok, data = pcall(function()
            return HttpService:JSONDecode(readfile(configFile))
        end)
        if ok and type(data) == "table" then
            cfg = data
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = settings.Name or "DriftwynUI"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = player:WaitForChild("PlayerGui")

    local main = Instance.new("Frame")
    main.Name = "MainFrame"
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.Position = UDim2.new(cfg.Position.X, cfg.Position.Ox, cfg.Position.Y, cfg.Position.Oy)
    main.Size = UDim2.new(0, UIS.TouchEnabled and 350 or 600, 0, UIS.TouchEnabled and 400 or 450)
    main.BackgroundColor3 = COLORS.Background
    main.Parent = gui
    Instance.new("UICorner", main).CornerRadius = UDim.new(0, 8)

    local title = Instance.new("TextLabel", main)
    title.Size = UDim2.new(1, 0, 0, 32)
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamSemibold
    title.TextSize = 18
    title.TextColor3 = COLORS.Text
    title.Text = settings.Title or "Driftwyn Hub"
    title.TextXAlignment = Enum.TextXAlignment.Center

    -- Tab Button Container
    local tabButtons = Instance.new("Frame", main)
    tabButtons.Size = UDim2.new(1, 0, 0, 36)
    tabButtons.Position = UDim2.new(0, 0, 0, 32)
    tabButtons.BackgroundTransparency = 1

    local tabLayout = Instance.new("UIListLayout", tabButtons)
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0, 6)
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local tabs = {}
    local currentTab = nil

    local function switchTab(tab)
        if currentTab then currentTab.Visible = false end
        currentTab = tab
        currentTab.Visible = true
    end

    function DriftwynLib:AddTab(tabName)
        local btn = Instance.new("TextButton", tabButtons)
        btn.Size = UDim2.new(0, 120, 1, 0)
        btn.BackgroundColor3 = COLORS.Button
        btn.Text = tabName
        btn.TextColor3 = COLORS.Text
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 14
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)

        local tabPage = Instance.new("ScrollingFrame", main)
        tabPage.Visible = false
        tabPage.Size = UDim2.new(1, -20, 1, -76)
        tabPage.Position = UDim2.new(0, 10, 0, 72)
        tabPage.BackgroundTransparency = 1
        tabPage.ScrollBarThickness = 6
        tabPage.CanvasSize = UDim2.new(0, 0, 0, 0)

        local list = Instance.new("UIListLayout", tabPage)
        list.Padding = UDim.new(0, 8)
        list.SortOrder = Enum.SortOrder.LayoutOrder
        list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabPage.CanvasSize = UDim2.new(0, 0, 0, list.AbsoluteContentSize.Y + 10)
        end)

        btn.MouseButton1Click:Connect(function()
            switchTab(tabPage)
        end)

        if not currentTab then switchTab(tabPage) end

        local tabObj = {} -- Will be extended in Part 2
        tabObj.Container = tabPage
        tabs[#tabs + 1] = tabObj
        return tabObj
    end

        function tabObj:AddSection(title)
            local section = Instance.new("Frame", tabObj.Container)
            section.Size = UDim2.new(1, 0, 0, 34)
            section.BackgroundColor3 = COLORS.Section
            section.ClipsDescendants = true
            Instance.new("UICorner", section).CornerRadius = UDim.new(0, 6)

            local header = Instance.new("TextButton", section)
            header.Size = UDim2.new(1, 0, 0, 34)
            header.BackgroundTransparency = 1
            header.Text = "▼  " .. title
            header.TextColor3 = COLORS.Text
            header.Font = Enum.Font.GothamBold
            header.TextSize = 14
            header.TextXAlignment = Enum.TextXAlignment.Left

            local content = Instance.new("Frame", section)
            content.Position = UDim2.new(0, 0, 0, 34)
            content.Size = UDim2.new(1, 0, 0, 0)
            content.BackgroundTransparency = 1

            local layout = Instance.new("UIListLayout", content)
            layout.Padding = UDim.new(0, 6)
            layout.SortOrder = Enum.SortOrder.LayoutOrder

            local open = true
            header.MouseButton1Click:Connect(function()
                open = not open
                header.Text = (open and "▼ " or "▶ ") .. title
                local goalSize = open and (34 + layout.AbsoluteContentSize.Y) or 34
                TweenService:Create(section, TweenInfo.new(0.25), { Size = UDim2.new(1, 0, 0, goalSize) }):Play()
            end)

            layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
                if open then
                    section.Size = UDim2.new(1, 0, 0, 34 + layout.AbsoluteContentSize.Y)
                end
            end)

            content.Parent = section

            local API = {}

            function API:AddButton(text, callback)
                local btn = Instance.new("TextButton", content)
                btn.Size = UDim2.new(1, 0, 0, 34)
                btn.BackgroundColor3 = COLORS.Button
                btn.TextColor3 = COLORS.Text
                btn.Font = Enum.Font.Gotham
                btn.TextSize = 14
                btn.Text = text
                btn.BorderSizePixel = 0
                Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
                btn.MouseButton1Click:Connect(callback)
                return btn
            end

            function API:AddToggle(text, callback)
                local frame = Instance.new("Frame", content)
                frame.Size = UDim2.new(1, 0, 0, 34)
                frame.BackgroundTransparency = 1

                local label = Instance.new("TextLabel", frame)
                label.Size = UDim2.new(0.7, 0, 1, 0)
                label.Position = UDim2.new(0, 0, 0, 0)
                label.Text = text
                label.BackgroundTransparency = 1
                label.TextColor3 = COLORS.Text
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left

                local toggle = Instance.new("Frame", frame)
                toggle.Size = UDim2.new(0, 40, 0, 22)
                toggle.Position = UDim2.new(1, -50, 0.5, -11)
                toggle.BackgroundColor3 = COLORS.ToggleOff
                Instance.new("UICorner", toggle).CornerRadius = UDim.new(1, 0)

                local knob = Instance.new("Frame", toggle)
                knob.Size = UDim2.new(0, 18, 0, 18)
                knob.Position = UDim2.new(0, 2, 0, 2)
                knob.BackgroundColor3 = Color3.new(1, 1, 1)
                Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0)

                local state = false
                toggle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        state = not state
                        toggle.BackgroundColor3 = state and COLORS.ToggleOn or COLORS.ToggleOff
                        knob:TweenPosition(
                            UDim2.new(state and 1 or 0, state and -20 or 2, 0, 2),
                            "Out", "Quad", 0.2, true
                        )
                        callback(state)
                    end
                end)

                return frame
            end

            function API:AddTextBox(placeholder, callback)
                local boxFrame = Instance.new("Frame", content)
                boxFrame.Size = UDim2.new(1, 0, 0, 34)
                boxFrame.BackgroundColor3 = COLORS.Dropdown
                Instance.new("UICorner", boxFrame).CornerRadius = UDim.new(0, 6)

                local box = Instance.new("TextBox", boxFrame)
                box.Size = UDim2.new(1, -10, 1, 0)
                box.Position = UDim2.new(0, 5, 0, 0)
                box.Text = ""
                box.PlaceholderText = placeholder
                box.BackgroundTransparency = 1
                box.TextColor3 = COLORS.Text
                box.Font = Enum.Font.Gotham
                box.TextSize = 14
                box.ClearTextOnFocus = false

                box.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        callback(box.Text)
                    end
                end)

                return boxFrame
            end

            function API:AddKeybind(name, defaultKey, callback)
                local frame = Instance.new("Frame", content)
                frame.Size = UDim2.new(1, 0, 0, 34)
                frame.BackgroundColor3 = COLORS.Dropdown
                Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

                local label = Instance.new("TextLabel", frame)
                label.Size = UDim2.new(1, -10, 1, 0)
                label.Position = UDim2.new(0, 5, 0, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = COLORS.Text
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Text = name .. ": [" .. defaultKey.Name .. "]"

                local currentKey = defaultKey

                frame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        label.Text = name .. ": [Press a key]"
                        local conn
                        conn = UIS.InputBegan:Connect(function(newInput, gp)
                            if not gp and newInput.KeyCode ~= Enum.KeyCode.Unknown then
                                currentKey = newInput.KeyCode
                                label.Text = name .. ": [" .. currentKey.Name .. "]"
                                conn:Disconnect()
                            end
                        end)
                    end
                end)

                UIS.InputBegan:Connect(function(input, gp)
                    if not gp and input.KeyCode == currentKey then
                        callback()
                    end
                end)

                return frame
            end

            function API:AddDropdown(title, options, callback)
                local frame = Instance.new("Frame", content)
                frame.Size = UDim2.new(1, 0, 0, 34)
                frame.BackgroundColor3 = COLORS.Dropdown
                Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

                local label = Instance.new("TextButton", frame)
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = COLORS.Text
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.Text = title .. ": [Select ▼]"

                local open = false
                local dropdown = Instance.new("Frame", content)
                dropdown.Size = UDim2.new(1, 0, 0, 0)
                dropdown.BackgroundTransparency = 1
                dropdown.Visible = false

                local layout = Instance.new("UIListLayout", dropdown)
                layout.Padding = UDim.new(0, 4)

                label.MouseButton1Click:Connect(function()
                    open = not open
                    dropdown.Visible = open
                    dropdown.Size = open and UDim2.new(1, 0, 0, #options * 30) or UDim2.new(1, 0, 0, 0)
                end)

                for _, option in ipairs(options) do
                    local optBtn = Instance.new("TextButton", dropdown)
                    optBtn.Size = UDim2.new(1, 0, 0, 28)
                    optBtn.BackgroundColor3 = COLORS.DropdownItem
                    optBtn.Text = option
                    optBtn.Font = Enum.Font.Gotham
                    optBtn.TextColor3 = COLORS.Text
                    optBtn.TextSize = 14
                    Instance.new("UICorner", optBtn).CornerRadius = UDim.new(0, 6)

                    optBtn.MouseButton1Click:Connect(function()
                        callback(option)
                        label.Text = title .. ": [" .. option .. "]"
                        dropdown.Visible = false
                        dropdown.Size = UDim2.new(1, 0, 0, 0)
                        open = false
                    end)
                end

                return frame
            end

            function API:AddSlider(title, min, max, default, callback)
                local frame = Instance.new("Frame", content)
                frame.Size = UDim2.new(1, 0, 0, 50)
                frame.BackgroundColor3 = COLORS.Dropdown
                Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

                local label = Instance.new("TextLabel", frame)
                label.Size = UDim2.new(1, -10, 0, 20)
                label.Position = UDim2.new(0, 5, 0, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = COLORS.Text
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Text = title .. ": " .. default

                local sliderBack = Instance.new("Frame", frame)
                sliderBack.Size = UDim2.new(1, -20, 0, 10)
                sliderBack.Position = UDim2.new(0, 10, 0, 30)
                sliderBack.BackgroundColor3 = COLORS.Section
                Instance.new("UICorner", sliderBack).CornerRadius = UDim.new(1, 0)

                local sliderFill = Instance.new("Frame", sliderBack)
                sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                sliderFill.BackgroundColor3 = COLORS.Accent
                Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(1, 0)

                local dragging = false

                sliderBack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                RunService.RenderStepped:Connect(function()
                    if dragging then
                        local mouse = UIS:GetMouseLocation().X
                        local absPos = sliderBack.AbsolutePosition.X
                        local absSize = sliderBack.AbsoluteSize.X
                        local ratio = math.clamp((mouse - absPos) / absSize, 0, 1)
                        local value = math.floor(min + (max - min) * ratio)
                        sliderFill.Size = UDim2.new(ratio, 0, 1, 0)
                        label.Text = title .. ": " .. value
                        callback(value)
                    end
                end)

                return frame
            end

            function API:AddMultiDropdown(title, options, callback)
                local selected = {}
                local frame = Instance.new("Frame", content)
                frame.Size = UDim2.new(1, 0, 0, 34)
                frame.BackgroundColor3 = COLORS.Dropdown
                Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

                local label = Instance.new("TextButton", frame)
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = COLORS.Text
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.Text = title .. ": [None]"

                local open = false
                local dropdown = Instance.new("Frame", content)
                dropdown.Size = UDim2.new(1, 0, 0, 0)
                dropdown.BackgroundTransparency = 1
                dropdown.Visible = false

                local layout = Instance.new("UIListLayout", dropdown)
                layout.Padding = UDim.new(0, 4)

                label.MouseButton1Click:Connect(function()
                    open = not open
                    dropdown.Visible = open
                    dropdown.Size = open and UDim2.new(1, 0, 0, #options * 30) or UDim2.new(1, 0, 0, 0)
                end)

                for _, option in ipairs(options) do
                    local btn = Instance.new("TextButton", dropdown)
                    btn.Size = UDim2.new(1, 0, 0, 28)
                    btn.BackgroundColor3 = COLORS.DropdownItem
                    btn.Text = "[ ] " .. option
                    btn.Font = Enum.Font.Gotham
                    btn.TextColor3 = COLORS.Text
                    btn.TextSize = 14
                    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)

                    btn.MouseButton1Click:Connect(function()
                        if selected[option] then
                            selected[option] = nil
                        else
                            selected[option] = true
                        end

                        local items = {}
                        for k in pairs(selected) do table.insert(items, k) end
                        label.Text = title .. ": [" .. table.concat(items, ", ") .. "]"
                        callback(items)
                    end)
                end

                return frame
            end

            return API
        end -- End of AddSection

    -- Toggle UI with RightControl
    UIS.InputBegan:Connect(function(input, gp)
        if not gp and input.KeyCode == Enum.KeyCode.RightControl then
            main.Visible = not main.Visible
            cfg.Visible = main.Visible
            writefile(configFile, HttpService:JSONEncode(cfg))
        end
    end)

    return self
end

return DriftwynLib
